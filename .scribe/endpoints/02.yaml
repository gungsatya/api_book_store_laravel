name: 'Tag Management'
description: |-

  API collection to manage tags data.
endpoints:
  -
    httpMethods:
      - GET
    uri: api/v1/tags
    metadata:
      groupName: 'Tag Management'
      groupDescription: |-

        API collection to manage tags data.
      subgroup: ''
      subgroupDescription: ''
      title: 'Tag Collection'
      description: 'Get tag collection'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters:
      q:
        name: q
        description: 'Searching keyword of the collection.'
        required: false
        example: Encyclopedia
        type: string
        custom: []
      pageSize:
        name: pageSize
        description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
        required: false
        example: 10
        type: integer
        custom: []
      page:
        name: page
        description: 'Page index to view.'
        required: false
        example: 1
        type: integer
        custom: []
    cleanQueryParameters:
      q: Encyclopedia
      pageSize: 10
      page: 1
    bodyParameters:
      pageSize:
        name: pageSize
        description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
        required: false
        example: 10
        type: integer
        custom: []
      q:
        name: q
        description: 'Searching keyword of the collection.'
        required: false
        example: Encyclopedia
        type: string
        custom: []
    cleanBodyParameters:
      pageSize: 10
      q: Encyclopedia
    fileParameters: []
    responses:
      -
        status: 200
        content: '{"tags":[{"id":1,"name":"Dictionary"},{"id":1,"name":"Dictionary"}],"message":"Success to get tag collection"}'
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - POST
    uri: api/v1/tags
    metadata:
      groupName: 'Tag Management'
      groupDescription: |-

        API collection to manage tags data.
      subgroup: ''
      subgroupDescription: ''
      title: 'Store new tag'
      description: 'Store a newly created tag in database.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters: []
    cleanUrlParameters: []
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters:
      name:
        name: name
        description: "Tag's name."
        required: true
        example: Magazine
        type: string
        custom: []
    cleanBodyParameters:
      name: Magazine
    fileParameters: []
    responses:
      -
        status: 201
        content: |-
          {
               "tag": {
                   "id": 2,
                   "name": "Magazine"
               },
               "message": "Tag has been created."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
  -
    httpMethods:
      - DELETE
    uri: 'api/v1/tags/{id}'
    metadata:
      groupName: 'Tag Management'
      groupDescription: |-

        API collection to manage tags data.
      subgroup: ''
      subgroupDescription: ''
      title: 'Delete tag'
      description: 'Remove the specified tag from database.'
      authenticated: false
      custom: []
    headers:
      Content-Type: application/json
      Accept: application/json
    urlParameters:
      id:
        name: id
        description: 'Tag ID.'
        required: true
        example: 1
        type: integer
        custom: []
    cleanUrlParameters:
      id: 1
    queryParameters: []
    cleanQueryParameters: []
    bodyParameters: []
    cleanBodyParameters: []
    fileParameters: []
    responses:
      -
        status: 200
        content: |-
          {
               "tag": {
                   "id": 2,
                   "name": "Magazine"
               },
               "message": "Tag has been deleted."
          }
        headers: []
        description: ''
        custom: []
    responseFields: []
    auth: []
    controller: null
    method: null
    route: null
    custom: []
