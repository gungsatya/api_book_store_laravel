openapi: 3.0.3
info:
  title: 'Book Store API Documentation'
  description: 'This API for educational purpose with study case book store. Created by Satya Wibawa.'
  version: 1.0.0
servers:
  -
    url: 'http://localhost:8000'
paths:
  /api/v1/authors:
    get:
      summary: 'Author collections'
      operationId: authorCollections
      description: 'Get a list of authors.'
      parameters:
        -
          in: query
          name: q
          description: 'Searching keyword of the collection.'
          example: Eileen
          required: false
          schema:
            type: string
            description: 'Searching keyword of the collection.'
            example: Eileen
        -
          in: query
          name: pageSize
          description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
            example: 10
        -
          in: query
          name: page
          description: 'Page index to view.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page index to view.'
            example: 1
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  authors:
                    -
                      id: 2
                      name: 'Eileen Murazik'
                      dob: '2019-10-29'
                      description: 'Qui illo quia molestias natus. Labore maiores tempora harum. Ut dolor doloribus consequatur omnis sit perspiciatis. Nihil dolorem ut nihil impedit.'
                      created_at: '2023-02-23T09:43:03.000000Z'
                      updated_at: '2023-02-23T09:43:03.000000Z'
                  links:
                    first: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                    last: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                    prev: null
                    next: null
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 1
                    links:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                        label: '1'
                        active: true
                      -
                        url: null
                        label: 'Next &raquo;'
                        active: false
                    path: 'http://127.0.0.1:8000/api/v1/authors'
                    per_page: 10
                    to: 1
                    total: 1
                  message: 'Success to get author collection'
                properties:
                  authors:
                    type: array
                    example:
                      -
                        id: 2
                        name: 'Eileen Murazik'
                        dob: '2019-10-29'
                        description: 'Qui illo quia molestias natus. Labore maiores tempora harum. Ut dolor doloribus consequatur omnis sit perspiciatis. Nihil dolorem ut nihil impedit.'
                        created_at: '2023-02-23T09:43:03.000000Z'
                        updated_at: '2023-02-23T09:43:03.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: string
                          example: 'Eileen Murazik'
                        dob:
                          type: string
                          example: '2019-10-29'
                        description:
                          type: string
                          example: 'Qui illo quia molestias natus. Labore maiores tempora harum. Ut dolor doloribus consequatur omnis sit perspiciatis. Nihil dolorem ut nihil impedit.'
                        created_at:
                          type: string
                          example: '2023-02-23T09:43:03.000000Z'
                        updated_at:
                          type: string
                          example: '2023-02-23T09:43:03.000000Z'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                      last:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      links:
                        type: array
                        example:
                          -
                            url: null
                            label: '&laquo; Previous'
                            active: false
                          -
                            url: 'http://127.0.0.1:8000/api/v1/authors?page=1'
                            label: '1'
                            active: true
                          -
                            url: null
                            label: 'Next &raquo;'
                            active: false
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                              example: null
                            label:
                              type: string
                              example: '&laquo; Previous'
                            active:
                              type: boolean
                              example: false
                      path:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/authors'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
                  message:
                    type: string
                    example: 'Success to get author collection'
      tags:
        - 'Author Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                pageSize:
                  type: integer
                  description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
                  example: 10
                q:
                  type: string
                  description: 'Searching keyword of the collection.'
                  example: Eileen
      security: []
    post:
      summary: 'Store a new author'
      operationId: storeANewAuthor
      description: 'Store a newly created author data in database storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  author:
                    id: 13
                    name: 'Robert P.'
                    dob: '1960-12-23'
                    description: 'this is dummy data'
                    created_at: '2023-02-24T03:06:51.000000Z'
                    updated_at: '2023-02-24T03:06:51.000000Z'
                  message: 'Author has been saved.'
                properties:
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 13
                      name:
                        type: string
                        example: 'Robert P.'
                      dob:
                        type: string
                        example: '1960-12-23'
                      description:
                        type: string
                        example: 'this is dummy data'
                      created_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                  message:
                    type: string
                    example: 'Author has been saved.'
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the author.'
                  example: 'Robert P.'
                dob:
                  type: date
                  description: "Author's date of birth with format Y-m-d."
                  example: '1960-12-23'
                description:
                  type: string
                  description: 'Description of the author.'
                  example: 'this is dummy data'
              required:
                - name
                - dob
      security: []
  '/api/v1/authors/{id}':
    get:
      summary: 'Show author data'
      operationId: showAuthorData
      description: 'Display detail data of the author'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  author:
                    id: 20
                    name: 'Celestino Larson'
                    dob: '2008-01-22'
                    description: 'Et sit ratione omnis excepturi cumque laborum vel. Laborum numquam consectetur asperiores sit. Ipsa qui odio quo unde porro quaerat. Dolor enim voluptatem dolore quis atque et.'
                    created_at: '2023-02-24T06:10:16.000000Z'
                    updated_at: '2023-02-24T06:10:16.000000Z'
                  message: 'Success to get author data'
                properties:
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 20
                      name:
                        type: string
                        example: 'Celestino Larson'
                      dob:
                        type: string
                        example: '2008-01-22'
                      description:
                        type: string
                        example: 'Et sit ratione omnis excepturi cumque laborum vel. Laborum numquam consectetur asperiores sit. Ipsa qui odio quo unde porro quaerat. Dolor enim voluptatem dolore quis atque et.'
                      created_at:
                        type: string
                        example: '2023-02-24T06:10:16.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T06:10:16.000000Z'
                  message:
                    type: string
                    example: 'Success to get author data'
      tags:
        - 'Author Management'
      security: []
    put:
      summary: 'Update author data'
      operationId: updateAuthorData
      description: 'Update the specified author data in database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  author:
                    id: 2
                    name: 'Robert P.'
                    dob: '1960-12-23'
                    description: 'This is my new dummy description'
                    created_at: '2023-02-24T03:06:51.000000Z'
                    updated_at: '2023-02-24T03:06:51.000000Z'
                  message: 'Author has been saved.'
                properties:
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: 'Robert P.'
                      dob:
                        type: string
                        example: '1960-12-23'
                      description:
                        type: string
                        example: 'This is my new dummy description'
                      created_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                  message:
                    type: string
                    example: 'Author has been saved.'
      tags:
        - 'Author Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: 'Name of the author.'
                  example: 'Robert P.'
                dob:
                  type: date
                  description: "Author's date of birth with format Y-m-d."
                  example: '1960-12-23'
                description:
                  type: string
                  description: 'Description of the author.'
                  example: 'This is my new dummy description'
              required:
                - name
                - dob
      security: []
    delete:
      summary: 'Remove author data'
      operationId: removeAuthorData
      description: 'Remove the specified resource from storage.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  author:
                    id: 2
                    name: 'Robert P.'
                    dob: '1960-12-23'
                    description: 'This is my new dummy description'
                    created_at: '2023-02-24T03:06:51.000000Z'
                    updated_at: '2023-02-24T03:06:51.000000Z'
                  message: 'Author has been deleted.'
                properties:
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: 'Robert P.'
                      dob:
                        type: string
                        example: '1960-12-23'
                      description:
                        type: string
                        example: 'This is my new dummy description'
                      created_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T03:06:51.000000Z'
                  message:
                    type: string
                    example: 'Author has been deleted.'
      tags:
        - 'Author Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Author ID.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/books:
    get:
      summary: 'Book Collections'
      operationId: bookCollections
      description: 'Get book list'
      parameters:
        -
          in: query
          name: tag_ids
          description: 'IDs of tag in search.'
          example: '1,2'
          required: false
          schema:
            type: string
            description: 'IDs of tag in search.'
            example: '1,2'
        -
          in: query
          name: q
          description: 'Searching keyword of the collection.'
          example: 'Harry Potter'
          required: false
          schema:
            type: string
            description: 'Searching keyword of the collection.'
            example: 'Harry Potter'
        -
          in: query
          name: pageSize
          description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
            example: 10
        -
          in: query
          name: page
          description: 'Page index to view.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page index to view.'
            example: 1
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  books:
                    -
                      id: 13
                      title: 'Harry Potter'
                      description: 'This harry potter description'
                      price: 150000
                      release_date: '2023-12-23T00:00:00.000000Z'
                      image_path: null
                      tags:
                        -
                          id: 1
                          name: Dictionary
                        -
                          id: 2
                          name: Novel
                      created_at: '2023-02-24T05:28:13.000000Z'
                      updated_at: '2023-02-24T05:28:13.000000Z'
                  links:
                    first: 'http://127.0.0.1:8000/api/v1/books?page=1'
                    last: 'http://127.0.0.1:8000/api/v1/books?page=1'
                    prev: null
                    next: null
                  meta:
                    current_page: 1
                    from: 1
                    last_page: 1
                    links:
                      -
                        url: null
                        label: '&laquo; Previous'
                        active: false
                      -
                        url: 'http://127.0.0.1:8000/api/v1/books?page=1'
                        label: '1'
                        active: true
                      -
                        url: null
                        label: 'Next &raquo;'
                        active: false
                    path: 'http://127.0.0.1:8000/api/v1/books'
                    per_page: 10
                    to: 1
                    total: 1
                  message: 'Success to get book collection'
                properties:
                  books:
                    type: array
                    example:
                      -
                        id: 13
                        title: 'Harry Potter'
                        description: 'This harry potter description'
                        price: 150000
                        release_date: '2023-12-23T00:00:00.000000Z'
                        image_path: null
                        tags:
                          -
                            id: 1
                            name: Dictionary
                          -
                            id: 2
                            name: Novel
                        created_at: '2023-02-24T05:28:13.000000Z'
                        updated_at: '2023-02-24T05:28:13.000000Z'
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 13
                        title:
                          type: string
                          example: 'Harry Potter'
                        description:
                          type: string
                          example: 'This harry potter description'
                        price:
                          type: integer
                          example: 150000
                        release_date:
                          type: string
                          example: '2023-12-23T00:00:00.000000Z'
                        image_path:
                          type: string
                          example: null
                        tags:
                          type: array
                          example:
                            -
                              id: 1
                              name: Dictionary
                            -
                              id: 2
                              name: Novel
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 1
                              name:
                                type: string
                                example: Dictionary
                        created_at:
                          type: string
                          example: '2023-02-24T05:28:13.000000Z'
                        updated_at:
                          type: string
                          example: '2023-02-24T05:28:13.000000Z'
                  links:
                    type: object
                    properties:
                      first:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/books?page=1'
                      last:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/books?page=1'
                      prev:
                        type: string
                        example: null
                      next:
                        type: string
                        example: null
                  meta:
                    type: object
                    properties:
                      current_page:
                        type: integer
                        example: 1
                      from:
                        type: integer
                        example: 1
                      last_page:
                        type: integer
                        example: 1
                      links:
                        type: array
                        example:
                          -
                            url: null
                            label: '&laquo; Previous'
                            active: false
                          -
                            url: 'http://127.0.0.1:8000/api/v1/books?page=1'
                            label: '1'
                            active: true
                          -
                            url: null
                            label: 'Next &raquo;'
                            active: false
                        items:
                          type: object
                          properties:
                            url:
                              type: string
                              example: null
                            label:
                              type: string
                              example: '&laquo; Previous'
                            active:
                              type: boolean
                              example: false
                      path:
                        type: string
                        example: 'http://127.0.0.1:8000/api/v1/books'
                      per_page:
                        type: integer
                        example: 10
                      to:
                        type: integer
                        example: 1
                      total:
                        type: integer
                        example: 1
                  message:
                    type: string
                    example: 'Success to get book collection'
      tags:
        - 'Book Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                pageSize:
                  type: integer
                  description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
                  example: 10
                q:
                  type: string
                  description: 'Searching keyword of the collection.'
                  example: 'Harry Potter'
                tag_ids:
                  type: string
                  description: 'IDs of tag in search.'
                  example: '1,2'
      security: []
    post:
      summary: 'Store new book data'
      operationId: storeNewBookData
      description: 'Store a newly created book data in database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     {\n         \"book\": {\n             \"id\": 13,\n             \"title\": \"Harry Potter\",\n             \"description\": \"This harry potter description\",\n             \"price\": 150000,\n             \"release_date\": \"2023-12-23T00:00:00.000000Z\",\n             \"image_path\": null,\n             \"author\": {\n                 \"id\": 1,\n                 \"name\": \"Dr. Verlie Waelchi V\",\n                 \"dob\": \"1984-01-07\",\n                 \"description\": \"Quas et sed sit est expedita dolores. Voluptatem et iste et aspernatur est dolore in. Iure nesciunt voluptate quia voluptatem. Excepturi soluta qui rerum dicta et dolorem.\",\n                 \"created_at\": \"2023-02-24T05:27:46.000000Z\",\n                 \"updated_at\": \"2023-02-24T05:27:46.000000Z\"\n             },\n             \"tags\": [\n                 {\n                     \"id\": 1,\n                     \"name\": \"Dictionary\"\n                 },\n                 {\n                     \"id\": 2,\n                     \"name\": \"Novel\"\n                 }\n             ],\n             \"created_at\": \"2023-02-24T05:28:13.000000Z\",\n             \"updated_at\": \"2023-02-24T05:28:13.000000Z\"\n         },\n         \"message\": \"Book has been created\"\n         }\n}"
      tags:
        - 'Book Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  description: "Book's Author."
                  example: 1
                title:
                  type: string
                  description: "Book's title."
                  example: 'Harry Potter'
                description:
                  type: string
                  description: 'Description of the book.'
                  example: 'This harry potter description'
                price:
                  type: number
                  description: "Book's price."
                  example: 150000.0
                release_date:
                  type: date
                  description: "Book's released date with format Y-m-d."
                  example: '1960-12-23'
                cover_image:
                  type: string
                  format: binary
                  description: "Book's cover image"
                tag_ids:
                  type: array
                  description: 'Tag ids'
                  example:
                    - 11
                  items:
                    type: integer
              required:
                - author_id
                - title
                - price
                - release_date
      security: []
  '/api/v1/books/{id}':
    get:
      summary: 'Show book data'
      operationId: showBookData
      description: 'Display detail data of the author'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  book:
                    id: 27
                    title: 'Et quas.'
                    description: 'Rerum esse similique eos minus quibusdam. Quo autem pariatur autem ipsam. Itaque et atque necessitatibus officia rerum magnam rem. Quod illo debitis est repellendus sed.'
                    price: 57807
                    release_date: '2016-06-06T00:00:00.000000Z'
                    image_path: null
                    created_at: '2023-02-24T06:10:16.000000Z'
                    updated_at: '2023-02-24T06:10:16.000000Z'
                  message: 'Success to get book data'
                properties:
                  book:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 27
                      title:
                        type: string
                        example: 'Et quas.'
                      description:
                        type: string
                        example: 'Rerum esse similique eos minus quibusdam. Quo autem pariatur autem ipsam. Itaque et atque necessitatibus officia rerum magnam rem. Quod illo debitis est repellendus sed.'
                      price:
                        type: integer
                        example: 57807
                      release_date:
                        type: string
                        example: '2016-06-06T00:00:00.000000Z'
                      image_path:
                        type: string
                        example: null
                      created_at:
                        type: string
                        example: '2023-02-24T06:10:16.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T06:10:16.000000Z'
                  message:
                    type: string
                    example: 'Success to get book data'
      tags:
        - 'Book Management'
      security: []
    put:
      summary: 'Update book data'
      operationId: updateBookData
      description: 'Update the specified author data in database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: multipart/form-data
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            text/plain:
              schema:
                type: string
                example: "{\n     {\n         \"book\": {\n             \"id\": 13,\n             \"title\": \"Harry Potter\",\n             \"description\": \"This harry potter description\",\n             \"price\": 150000,\n             \"release_date\": \"2023-12-23T00:00:00.000000Z\",\n             \"image_path\": null,\n             \"author\": {\n                 \"id\": 1,\n                 \"name\": \"Dr. Verlie Waelchi V\",\n                 \"dob\": \"1984-01-07\",\n                 \"description\": \"Quas et sed sit est expedita dolores. Voluptatem et iste et aspernatur est dolore in. Iure nesciunt voluptate quia voluptatem. Excepturi soluta qui rerum dicta et dolorem.\",\n                 \"created_at\": \"2023-02-24T05:27:46.000000Z\",\n                 \"updated_at\": \"2023-02-24T05:27:46.000000Z\"\n             },\n             \"tags\": [\n                 {\n                     \"id\": 1,\n                     \"name\": \"Dictionary\"\n                 },\n                 {\n                     \"id\": 2,\n                     \"name\": \"Novel\"\n                 }\n             ],\n             \"created_at\": \"2023-02-24T05:28:13.000000Z\",\n             \"updated_at\": \"2023-02-24T05:28:13.000000Z\"\n         },\n         \"message\": \"Book has been updated\"\n     }\n}"
      tags:
        - 'Book Management'
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                author_id:
                  type: integer
                  description: "Book's Author."
                  example: 1
                title:
                  type: string
                  description: "Book's title."
                  example: 'Harry Potter'
                description:
                  type: string
                  description: 'Description of the book.'
                  example: 'This harry potter description'
                price:
                  type: number
                  description: "Book's price."
                  example: 150000.0
                release_date:
                  type: date
                  description: "Book's released date with format Y-m-d."
                  example: '1960-12-23'
                cover_image:
                  type: string
                  format: binary
                  description: "Book's cover image"
                tag_ids:
                  type: array
                  description: 'Tag ids'
                  example:
                    - 20
                  items:
                    type: integer
              required:
                - author_id
                - title
                - price
                - release_date
      security: []
    delete:
      summary: 'Remove book data'
      operationId: removeBookData
      description: 'Remove the specified book from database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  author:
                    id: 13
                    title: 'Harry Potter'
                    description: 'This harry potter description'
                    price: 150000
                    release_date: '2023-12-23T00:00:00.000000Z'
                    image_path: null
                    author:
                      id: 1
                      name: 'Dr. Verlie Waelchi V'
                      dob: '1984-01-07'
                      description: 'Quas et sed sit est expedita dolores. Voluptatem et iste et aspernatur est dolore in. Iure nesciunt voluptate quia voluptatem. Excepturi soluta qui rerum dicta et dolorem.'
                      created_at: '2023-02-24T05:27:46.000000Z'
                      updated_at: '2023-02-24T05:27:46.000000Z'
                    tags:
                      -
                        id: 1
                        name: Dictionary
                      -
                        id: 2
                        name: Novel
                    created_at: '2023-02-24T05:28:13.000000Z'
                    updated_at: '2023-02-24T05:28:13.000000Z'
                  message: 'Book has been deleted'
                properties:
                  author:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 13
                      title:
                        type: string
                        example: 'Harry Potter'
                      description:
                        type: string
                        example: 'This harry potter description'
                      price:
                        type: integer
                        example: 150000
                      release_date:
                        type: string
                        example: '2023-12-23T00:00:00.000000Z'
                      image_path:
                        type: string
                        example: null
                      author:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: 'Dr. Verlie Waelchi V'
                          dob:
                            type: string
                            example: '1984-01-07'
                          description:
                            type: string
                            example: 'Quas et sed sit est expedita dolores. Voluptatem et iste et aspernatur est dolore in. Iure nesciunt voluptate quia voluptatem. Excepturi soluta qui rerum dicta et dolorem.'
                          created_at:
                            type: string
                            example: '2023-02-24T05:27:46.000000Z'
                          updated_at:
                            type: string
                            example: '2023-02-24T05:27:46.000000Z'
                      tags:
                        type: array
                        example:
                          -
                            id: 1
                            name: Dictionary
                          -
                            id: 2
                            name: Novel
                        items:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: Dictionary
                      created_at:
                        type: string
                        example: '2023-02-24T05:28:13.000000Z'
                      updated_at:
                        type: string
                        example: '2023-02-24T05:28:13.000000Z'
                  message:
                    type: string
                    example: 'Book has been deleted'
      tags:
        - 'Book Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Book ID.'
        example: 1
        required: true
        schema:
          type: integer
  /api/v1/tags:
    get:
      summary: 'Tag Collection'
      operationId: tagCollection
      description: 'Get tag collection'
      parameters:
        -
          in: query
          name: q
          description: 'Searching keyword of the collection.'
          example: Encyclopedia
          required: false
          schema:
            type: string
            description: 'Searching keyword of the collection.'
            example: Encyclopedia
        -
          in: query
          name: pageSize
          description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
          example: 10
          required: false
          schema:
            type: integer
            description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
            example: 10
        -
          in: query
          name: page
          description: 'Page index to view.'
          example: 1
          required: false
          schema:
            type: integer
            description: 'Page index to view.'
            example: 1
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  tags:
                    -
                      id: 1
                      name: Dictionary
                    -
                      id: 1
                      name: Dictionary
                  message: 'Success to get tag collection'
                properties:
                  tags:
                    type: array
                    example:
                      -
                        id: 1
                        name: Dictionary
                      -
                        id: 1
                        name: Dictionary
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Dictionary
                  message:
                    type: string
                    example: 'Success to get tag collection'
      tags:
        - 'Tag Management'
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                pageSize:
                  type: integer
                  description: 'Count of items per page. Allowed size 10, 25, 50, 100. Default 10.'
                  example: 10
                q:
                  type: string
                  description: 'Searching keyword of the collection.'
                  example: Encyclopedia
      security: []
    post:
      summary: 'Store new tag'
      operationId: storeNewTag
      description: 'Store a newly created tag in database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        201:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  tag:
                    id: 2
                    name: Magazine
                  message: 'Tag has been created.'
                properties:
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Magazine
                  message:
                    type: string
                    example: 'Tag has been created.'
      tags:
        - 'Tag Management'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Tag's name."
                  example: Magazine
              required:
                - name
      security: []
  '/api/v1/tags/{id}':
    delete:
      summary: 'Delete tag'
      operationId: deleteTag
      description: 'Remove the specified tag from database.'
      parameters:
        -
          in: header
          name: Content-Type
          description: ''
          example: application/json
          schema:
            type: string
        -
          in: header
          name: Accept
          description: ''
          example: application/json
          schema:
            type: string
      responses:
        200:
          description: ''
          content:
            application/json:
              schema:
                type: object
                example:
                  tag:
                    id: 2
                    name: Magazine
                  message: 'Tag has been deleted.'
                properties:
                  tag:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: Magazine
                  message:
                    type: string
                    example: 'Tag has been deleted.'
      tags:
        - 'Tag Management'
      security: []
    parameters:
      -
        in: path
        name: id
        description: 'Tag ID.'
        example: 1
        required: true
        schema:
          type: integer
tags:
  -
    name: 'Author Management'
    description: "\nAPI collection to manage authors data."
  -
    name: 'Book Management'
    description: "\nAPI collection to manage books data."
  -
    name: 'Tag Management'
    description: "\nAPI collection to manage tags data."
